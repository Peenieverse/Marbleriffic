@using Sandbox;
@using Marblerrific
@namespace Marblerrific.UI
@inherits PanelComponent

<root>
	<div class="iconDes" style="opacity: @iconDesOpacity;">
		<div style="position: absolute; font-size: 80px; ">@this.getMMIconDescription(Marble.CurrentMode.ToString())[0]</div>
		<div style="position: absolute; top: 100px; font-size: 30px;">@this.getMMIconDescription(Marble.CurrentMode.ToString())[1]</div>
	</div>
	<div class="duration">
		<div style="width: 400px; height: 10px;">
			<div>
				<div style="width: @((ItemSystem.EffectDuration/ItemSystem.EffectDurationSet)*100)%; background-color: #ffffff"></div>
				<div style="width: @(100-((ItemSystem.EffectDuration/ItemSystem.EffectDurationSet)*100))%; background-color: #000000; opacity:0.5"></div>
			</div>
		</div>
	</div>
	<div class="itemTable">
		<div>
			@for (int i = 0; i < ItemSystem.Items.Count; i++)
			{
				<div style="padding:5px; position: relative; text-align: center;">
					

					<div class="item" style=" position: relative;">
						@ItemSystem.Items[i].Icon
					</div>

					<div style="position: absolute; top: 0; left: 0; width: 40px; height: 40px; font-size: 30px; font-color: #fff">
						<img src="@(uiInputImages.getKey($"Slot{i+1}"))">
					</div>
				</div>
			}
		</div>
	</div>
	
	
</root>


@code
{
	//this.getMMIconDescription(Marble.CurrentMode.ToString())
	[Property] public ItemSystem ItemSystem { get; set; }
	[Property] public UiInputImages uiInputImages { get; set; }
	[Property] private MarbleScript Marble {get;set;}
	[Property] private List<movementModeDetail> MovementModeDetails {get;set;}
	float iconDesOpacity;
	public List<string> getMMIconDescription(string name)
	{
		List<string> nameDes = new List<string>();
		foreach(movementModeDetail mMD in MovementModeDetails)
		{
			if(mMD.name == name)
			{
				nameDes.Add(mMD.icon);
				nameDes.Add(mMD.description);
				return nameDes;
			}
		}
		nameDes.Add("");
		nameDes.Add("");
		return nameDes;
	}

	class movementModeDetail
	{
		public string name {get;set;}
		public string icon {get; set;}
		[TextArea] public string description {get;set;}
	}

	protected override void OnUpdate()
	{
		iconDesOpacity = MathX.Lerp(iconDesOpacity,Marble.CurrentMode != MoveMode.Normal ? 1 : 0, 2*Time.Delta);
	}

	protected override int BuildHash() => System.HashCode.Combine( iconDesOpacity, ItemSystem, ItemSystem.Items.Count,ItemSystem.EffectDuration, uiInputImages, Input.UsingController, Marble, this);
}
